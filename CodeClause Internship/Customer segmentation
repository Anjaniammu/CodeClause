import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Generate random data for demonstration
np.random.seed(0)
n_samples = 1000
total_spent = np.random.normal(loc=100, scale=50, size=n_samples)
num_purchases = np.random.randint(1, 20, size=n_samples)

# Create a DataFrame with the generated data
df = pd.DataFrame({'TotalSpent': total_spent, 'NumberOfPurchases': num_purchases})

# Standardize the features
X_scaled = StandardScaler().fit_transform(df)

# Choose the number of clusters (you may need to adjust this based on your data)
num_clusters = 3

# Apply K-Means clustering
df['Cluster'] = KMeans(n_clusters=num_clusters, random_state=42).fit_predict(X_scaled)

# Visualize the clusters
plt.scatter(df['TotalSpent'], df['NumberOfPurchases'], c=df['Cluster'], cmap='viridis')
plt.xlabel('Total Spent')
plt.ylabel('Number of Purchases')
plt.title('Customer Segmentation with K-Means Clustering')
plt.show()

# Display cluster details
cluster_details = df.groupby('Cluster')[['TotalSpent', 'NumberOfPurchases']].mean()
print(cluster_details)